{"version":3,"sources":["utility/squareObj.js","utility/gameChecker.js","contexts/square-context.js","components/game-square/square.jsx","components/game-board/board.jsx","components/history-board/history-board.jsx","App.js","serviceWorker.js","index.js"],"names":["SquareValue","value","key","i","j","isSelected","equal","orther","isSameValue","isComponentValue","this","Checker","check","squareValue","squares","checkSubDiagonal","length","checkCol","checkRow","checkMainDiagonal","twoHeadBlock","count","x","arr","y","console","log","squareContext","React","createContext","onSquareClick","square","Square","props","state","style","mark","Consumer","context","className","onClick","squareObj","Component","Board","renderSquare","renderRow","squareRow","map","player","historyBoard","step","current","backToStep","App","getBlankBoard","Array","fill","init","boardSquares","setState","win","history","checkWin","result","newBoard","forEach","r","select","handleClick","squaresBoard","squareM","newHis","currentStep","slice","location","newBoardHistory","lo","boardRow","back","forward","render","Provider","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e332d019.chunk.js","sourcesContent":["class SquareValue {\r\n    value = 0;\r\n    key = 0;\r\n    i = 0;\r\n    j = 0;\r\n    isSelected=false;\r\n    constructor(value, key, i, j) {\r\n        this.value = value;\r\n        this.key = key;\r\n        this.i = i;\r\n        this.j = j;\r\n    }\r\n    select(){\r\n        this.isSelected=true;\r\n    }\r\n    equal = (orther) => {\r\n        if (orther.key === this.key) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isSameValue = (orther) => {\r\n        if (orther.value === this.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    isComponentValue = (orther) => {\r\n        if (orther.value !== this.value && orther.value !== 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport default SquareValue;","import SquareValue from './squareObj';\r\nclass Checker {\r\n    static check = (squareValue, squares) => {\r\n        let result = [];\r\n        if (this.checkSubDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkSubDiagonal(squareValue, squares)\r\n        }\r\n        if (this.checkCol(squareValue, squares).length > 0) {\r\n            return this.checkCol(squareValue, squares)\r\n        }\r\n        if (this.checkRow(squareValue, squares).length > 0) {\r\n            return this.checkRow(squareValue, squares)\r\n        }\r\n        if (this.checkMainDiagonal(squareValue, squares).length > 0) {\r\n            return this.checkMainDiagonal(squareValue, squares)\r\n        }\r\n        return [];\r\n    }\r\n    static checkCol = (squareValue, squares) => {\r\n        //console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n            if (squareValue.isSameValue(squares[x][squareValue.j])) {\r\n                count++;\r\n                x++;\r\n                arr = [...arr, squares[x][squareValue.j]]\r\n            } else {\r\n                //console.log(squares[x][squareValue.j].value);\r\n                if (squares[x][squareValue.j].value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        while (x >= 0) {\r\n            var value = squares[x][squareValue.j];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x--;\r\n                arr = [...arr, value]\r\n            } else {\r\n                //console.log(squares[x][squareValue.j].value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        //console.log('Count col', count);\r\n        return (count === 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n    static checkRow = (squareValue, squares) => {\r\n        //console.log('Square value', squareValue);\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20) {\r\n\r\n            var value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x++;\r\n                arr = [...arr, value]\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        x = squareValue.j - 1;\r\n        while (x >= 0) {\r\n\r\n\r\n            var value = squares[squareValue.i][x];\r\n            if (squareValue.isSameValue(value)) {\r\n                count++;\r\n                x--;\r\n                arr = [...arr, value]\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        //console.log('Count row', count);\r\n        return (count === 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n    static checkMainDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j + 1;\r\n        let arr = [];\r\n        while (x < 20 && y < 20) {\r\n\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x++;\r\n                y++;\r\n                arr = [...arr, value];\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j - 1;\r\n        while (x >= 0 && y >= 0) {\r\n\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x--;\r\n                y--;\r\n                arr = [...arr, value];\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        //console.log('Check Main Diagonal', count);\r\n\r\n        return (count === 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n    static checkSubDiagonal = (squareValue, squares) => {\r\n        let twoHeadBlock = false;\r\n        let count = 1;\r\n        let x = squareValue.i + 1;\r\n        let y = squareValue.j - 1;\r\n        let arr = [];\r\n        while (x < 20 && y >= 0) {\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x++;\r\n                y--;\r\n                arr = [...arr, value];\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = true;\r\n                    //console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        x = squareValue.i - 1;\r\n        y = squareValue.j + 1;\r\n        while (x >= 0 && y < 20) {\r\n            var value = squares[x][y];\r\n            if (squareValue.isSameValue(value)) {\r\n                count = count + 1;\r\n                x--;\r\n                y++;\r\n                arr = [...arr, value];\r\n            } else {\r\n                //console.log(value);\r\n                if (value.value !== 0) {\r\n                    twoHeadBlock = twoHeadBlock & true;\r\n                    //console.log('Block 1');\r\n                } else {\r\n                    twoHeadBlock = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        console.log('Check Sub Diagonal', count);\r\n        console.log('twoHeadBlock', twoHeadBlock);\r\n        return (count === 5) && !twoHeadBlock ? arr : [];\r\n    }\r\n}\r\nexport default Checker;","import React from 'react';\r\n\r\nconst squareContext = React.createContext({\r\n    onSquareClick: (square) => { },\r\n    value: null\r\n});\r\n\r\nexport default squareContext;","import React from 'react';\r\nimport './square.css';\r\nimport SquareContext from '../../contexts/square-context';\r\n\r\nclass Square extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props.value)\r\n        //console.log(this.props.squareObj);\r\n        const value = this.props.value;\r\n        const style = this.props.isSelected ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        let mark = '';\r\n        if (value === 1) {\r\n            mark = 'X';\r\n        } else if (value === 2) {\r\n            mark = 'O';\r\n        }\r\n\r\n        return (\r\n            <SquareContext.Consumer>\r\n                {context =>\r\n                    <button\r\n                        \r\n                        className=\"square\"\r\n                        style={style}\r\n                        onClick={() => context.onSquareClick(this.props.squareObj)}\r\n                    >\r\n                        {mark}\r\n                    </button>\r\n                }\r\n            </SquareContext.Consumer>\r\n        );\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport Square from '../game-square/square';\r\nimport './board.css';\r\nimport { thisExpression } from '@babel/types';\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare = (square) => {\r\n        return <Square\r\n            isSelected={square.isSelected}\r\n            squareObj={square}\r\n            value={square.value} key={square.key}\r\n        />;\r\n    }\r\n    renderRow = (squareRow) => {\r\n        return (\r\n            <div className='board-row' key={'row' + squareRow[0].key}>\r\n                <div>\r\n                    {squareRow.map(square => this.renderSquare(square))}\r\n                </div>\r\n                <br></br>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        if (false) {\r\n            let winner = this.props.player === 1 ? 'O' : 'X';\r\n            return (\r\n                <div>\r\n                    <h1>Congratulation Player {winner}</h1>\r\n                    {/* <button onClick={this.init}>Play again</button> */}\r\n                </div>\r\n            )\r\n        } else\r\n            return (\r\n                <div>\r\n                    \r\n                    <div className=\"game-info\">\r\n                        <h1>{this.props.player === 1 ? 'X' : 'O'}</h1>\r\n                    </div>\r\n                    <div>\r\n                        {this.props.squares.map(squareRow => this.renderRow(squareRow))}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\nexport default Board;","import React, { useEffect } from 'react';\r\nimport './history-board.css';\r\nconst historyBoard = props => {\r\n\r\n    let arr = [];\r\n    for (let i = 0; i <= props.step; i++) {\r\n        arr = [...arr, i];\r\n    }\r\n    console.log(arr);\r\n    return arr.map(step => {\r\n        const style = props.current===step ? {\r\n            'backgroundColor': 'green'\r\n        } : null;\r\n        return <li>\r\n            <button className=\"button\" style={style} key={step} onClick={() => props.backToStep(step)}>Jump to {step}</button>\r\n        </li>\r\n    }\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default historyBoard;","import React, { Component } from 'react';\nimport SquareValue from './utility/squareObj';\nimport Checker from './utility/gameChecker';\nimport Board from './components/game-board/board';\nimport './App.css';\nimport SquareContext from './contexts/square-context';\nimport HistoryBoard from './components/history-board/history-board';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    var boardSquares = this.getBlankBoard();\n    this.state = {\n      currentStep: 0,\n      history: [],\n      boardSquares: boardSquares,\n      player: 1,\n      win: false,\n    }\n  }\n  getBlankBoard = () => {\n    let arr = new Array(20).fill(0);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = new Array(20);\n      for (var j = 0; j < arr[i].length; j++) {\n        arr[i][j] = new SquareValue(0, i * 10 * 2 + j, i, j);\n      }\n    }\n    return arr;\n  }\n  init = () => {\n    var boardSquares = this.getBlankBoard();\n    console.log(boardSquares);\n    this.setState()\n    this.setState({\n      boardSquares: boardSquares,\n      player: 1,\n      win: false,\n      history: []\n    });\n  }\n  checkWin = (square) => {\n    //console.log('square checkwin', square);\n    //Checker.check(square, this.state.squares);\n    const result = Checker.check(square, this.state.boardSquares)\n    if (result.length > 0) {\n      let newBoard = this.state.boardSquares.map(squareRow => {\n        squareRow.map(square => {\n          square.isSelected = false;\n          result.forEach(r => {\n            if (square.equal(r)) {\n              square.select();\n            }\n          })\n          return square;\n        })\n        return squareRow;\n\n      })\n      this.setState({\n        win: true,\n        boardSquares: newBoard\n      })\n    }\n  }\n  handleClick = (square) => {\n    const squaresBoard = this.state.boardSquares.map((squareRow) => {\n      squareRow.map(squareM => {\n        squareM.isSelected = false;\n        if (squareM.equal(square)) {\n          //console.log('map', squareM);\n          if (squareM.value === 0) {\n            squareM.value = this.state.player;\n            squareM.select();\n            this.checkWin(squareM);\n            let newHis = [];\n            if (this.state.currentStep < this.state.history.length) {\n              newHis = this.state.history.slice(0, this.state.currentStep)\n            } else {\n              newHis = [...this.state.history]\n            }\n            this.setState({\n              history: [...newHis, {\n                location: square.key,\n                player: this.state.player\n              }],\n              player: this.state.player === 1 ? 2 : 1,\n              currentStep: this.state.currentStep + 1,\n            });\n            //console.log('player', this.state.player)\n          }\n        }\n        return squareM;\n      })\n      return squareRow;\n    })\n\n    this.setState({ boardSquares: squaresBoard });\n  }\n  backToStep = (step) => {\n    const newBoardHistory = this.getBlankBoard();\n    const history = this.state.history;\n    for (let i = 0; i < step; i++) {\n      const lo = history[i].location;\n      newBoardHistory.map(boardRow => {\n        boardRow.map(square => {\n          square.isSelected = false;\n          if (square.key === lo) {\n            square.value = history[i].player;\n            square.select();\n          }\n          return square;\n        })\n        return boardRow;\n      })\n    }\n    console.log(step);\n    let player = 1;\n    if (step !== 0) {\n      player = this.state.history[step - 1].player === 1 ? 2 : 1;\n    }\n    this.setState({\n      boardSquares: newBoardHistory,\n      player: player,\n      currentStep: step\n    })\n  }\n  back = () => {\n    if (this.state.currentStep > 0) {\n      this.backToStep(this.state.currentStep - 1);\n    }\n  }\n  forward = () => {\n    if (this.state.currentStep < this.state.history.length) {\n      this.backToStep(this.state.currentStep + 1);\n    }\n  }\n  render = () => (\n    <div className=\"game\">\n      {this.state.win ? <div>\n        <h1>Congratulation Player {this.state.player === 1 ? 'O' : 'X'}</h1>\n      </div>\n        : null\n      }\n      <button onClick={this.init}>Play again</button>\n      <SquareContext.Provider value={\n        {\n          value: 1,\n          onSquareClick: (square) => this.handleClick(square)\n        }\n      }>\n        <Board squares={this.state.boardSquares}\n          win={this.state.win}\n          player={this.state.player}\n        />\n      </SquareContext.Provider>\n      {\n        this.state.win === false ?\n          <ol>\n            <HistoryBoard current={this.state.currentStep} step={this.state.history.length} backToStep={(step) => this.backToStep(step)}></HistoryBoard>\n          </ol> : null\n      }\n      <ol>\n        <li>\n          <button onClick={this.back}> Step back </button>\n          <button onClick={this.forward}> Step forward </button>\n        </li>\n      </ol>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}